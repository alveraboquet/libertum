{"version":3,"file":"Backtesting.e7c289ef.js","sources":["../../src/components/ftbot/BacktestResultView.vue","../../src/components/ftbot/BacktestResultSelect.vue","../../src/components/ftbot/BacktestHistoryLoad.vue","../../src/views/Backtesting.vue"],"sourcesContent":["<template>\n  <div class=\"container-fluid px-0 backtestresult-container\">\n    <div class=\"row d-flex justify-content-center\">\n      <h3>Backtest-result for {{ backtestResult.strategy_name }}</h3>\n    </div>\n\n    <div class=\"row text-left ml-0\">\n      <div class=\"row w-100\">\n        <div class=\"col-12 col-xl-6 px-0 px-xl-0 pr-xl-1\">\n          <b-card header=\"Strategy settings\">\n            <b-table\n              small\n              borderless\n              :items=\"backtestResultSettings\"\n              :fields=\"backtestsettingFields\"\n            >\n            </b-table>\n          </b-card>\n        </div>\n        <div class=\"col-12 col-xl-6 px-0 px-xl-0 pt-2 pt-xl-0 pl-xl-1\">\n          <b-card header=\"Metrics\">\n            <b-table small borderless :items=\"backtestResultStats\" :fields=\"backtestResultFields\">\n            </b-table>\n          </b-card>\n        </div>\n      </div>\n      <b-card header=\"Results per Exit-reason\" class=\"row mt-2 w-100\">\n        <b-table\n          small\n          hover\n          stacked=\"sm\"\n          :items=\"backtestResult.exit_reason_summary || backtestResult.sell_reason_summary\"\n          :fields=\"perExitReason\"\n        >\n        </b-table>\n      </b-card>\n      <b-card header=\"Results per pair\" class=\"row mt-2 w-100\">\n        <b-table\n          small\n          hover\n          stacked=\"sm\"\n          :items=\"backtestResult.results_per_pair\"\n          :fields=\"perPairFields\"\n        >\n        </b-table>\n      </b-card>\n\n      <b-card header=\"Single trades\" class=\"row mt-2 w-100\">\n        <TradeList\n          class=\"row trade-history mt-2 w-100\"\n          :trades=\"backtestResult.trades\"\n          :show-filter=\"true\"\n          :stake-currency=\"backtestResult.stake_currency\"\n        />\n      </b-card>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport { StrategyBacktestResult, Trade } from '@/types';\n\nimport { defineComponent, computed } from 'vue';\nimport {\n  timestampms,\n  formatPercent,\n  formatPrice,\n  humanizeDurationFromSeconds,\n} from '@/shared/formatters';\n\nexport default defineComponent({\n  name: 'LoginModal',\n  components: {\n    TradeList,\n  },\n  props: {\n    backtestResult: { required: true, type: Object as () => StrategyBacktestResult },\n  },\n  setup(props) {\n    const hasBacktestResult = computed(() => {\n      return !!props.backtestResult;\n    });\n\n    const formatPriceStake = (price) => {\n      return `${formatPrice(price, props.backtestResult.stake_currency_decimals)} ${\n        props.backtestResult.stake_currency\n      }`;\n    };\n    const getSortedTrades = (backtestResult: StrategyBacktestResult): Trade[] => {\n      const sortedTrades = backtestResult.trades\n        .slice()\n        .sort((a, b) => a.profit_ratio - b.profit_ratio);\n      return sortedTrades;\n    };\n\n    const bestPair = computed((): string => {\n      const trades = getSortedTrades(props.backtestResult);\n      const value = trades[trades.length - 1];\n      return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n    });\n    const worstPair = computed((): string => {\n      const trades = getSortedTrades(props.backtestResult);\n      const value = trades[0];\n      return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\n    });\n    const backtestResultStats = computed(() => {\n      // Transpose Result into readable format\n      const shortMetrics =\n        props.backtestResult?.trade_count_short && props.backtestResult?.trade_count_short > 0\n          ? [\n              { metric: '___', value: '___' },\n              {\n                metric: 'Long / Short',\n                value: `${props.backtestResult.trade_count_long} / ${props.backtestResult.trade_count_short}`,\n              },\n              {\n                metric: 'Total profit Long',\n                value: `${formatPercent(\n                  props.backtestResult.profit_total_long || 0,\n                )} | ${formatPriceStake(props.backtestResult.profit_total_long_abs)}`,\n              },\n              {\n                metric: 'Total profit Short',\n                value: `${formatPercent(\n                  props.backtestResult.profit_total_short || 0,\n                )} | ${formatPriceStake(props.backtestResult.profit_total_short_abs)}`,\n              },\n            ]\n          : [];\n\n      return [\n        {\n          metric: 'Total Profit',\n          value: `${formatPercent(props.backtestResult.profit_total)} | ${formatPriceStake(\n            props.backtestResult.profit_total_abs,\n          )}`,\n        },\n        {\n          metric: 'CAGR',\n          value: `${props.backtestResult.cagr ? formatPercent(props.backtestResult.cagr) : 'N/A'}`,\n        },\n        {\n          metric: 'Profit factor',\n          value: `${\n            props.backtestResult.profit_factor\n              ? formatPrice(props.backtestResult.profit_factor, 3)\n              : 'N/A'\n          }`,\n        },\n        {\n          metric: 'Total trades / Daily Avg Trades',\n          value: `${props.backtestResult.total_trades} / ${props.backtestResult.trades_per_day}`,\n        },\n        // { metric: 'First trade', value: props.backtestResult.backtest_fi },\n        // { metric: 'First trade Pair', value: props.backtestResult.backtest_best_day },\n        {\n          metric: 'Best day',\n          value: `${formatPercent(props.backtestResult.backtest_best_day, 2)} | ${formatPriceStake(\n            props.backtestResult.backtest_best_day_abs,\n          )}`,\n        },\n        {\n          metric: 'Worst day',\n          value: `${formatPercent(props.backtestResult.backtest_worst_day, 2)} | ${formatPriceStake(\n            props.backtestResult.backtest_worst_day_abs,\n          )}`,\n        },\n\n        {\n          metric: 'Win/Draw/Loss',\n          value: `${\n            props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1]\n              .wins\n          } / ${\n            props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1]\n              .draws\n          } / ${\n            props.backtestResult.results_per_pair[props.backtestResult.results_per_pair.length - 1]\n              .losses\n          }`,\n        },\n        {\n          metric: 'Days win/draw/loss',\n          value: `${props.backtestResult.winning_days} / ${props.backtestResult.draw_days} / ${props.backtestResult.losing_days}`,\n        },\n\n        {\n          metric: 'Avg. Duration winners',\n          value: humanizeDurationFromSeconds(props.backtestResult.winner_holding_avg),\n        },\n        {\n          metric: 'Avg. Duration Losers',\n          value: humanizeDurationFromSeconds(props.backtestResult.loser_holding_avg),\n        },\n        { metric: 'Rejected entry signals', value: props.backtestResult.rejected_signals },\n        {\n          metric: 'Entry/Exit timeouts',\n          value: `${props.backtestResult.timedout_entry_orders} / ${props.backtestResult.timedout_exit_orders}`,\n        },\n        {\n          metric: 'Canceled Trade Entries',\n          value: props.backtestResult.canceled_trade_entries ?? 'N/A',\n        },\n        {\n          metric: 'Canceled Entry Orders',\n          value: props.backtestResult.canceled_entry_orders ?? 'N/A',\n        },\n        {\n          metric: 'Replaced Entry Orders',\n          value: props.backtestResult.replaced_entry_orders ?? 'N/A',\n        },\n\n        ...shortMetrics,\n\n        { metric: '___', value: '___' },\n        { metric: 'Min balance', value: formatPriceStake(props.backtestResult.csum_min) },\n        { metric: 'Max balance', value: formatPriceStake(props.backtestResult.csum_max) },\n        { metric: 'Market change', value: formatPercent(props.backtestResult.market_change) },\n        { metric: '___', value: '___' },\n        {\n          metric: 'Max Drawdown (Account)',\n          value: formatPercent(props.backtestResult.max_drawdown_account),\n        },\n        {\n          metric: 'Max Drawdown ABS',\n          value: formatPriceStake(props.backtestResult.max_drawdown_abs),\n        },\n        {\n          metric: 'Drawdown high | low',\n          value: `${formatPriceStake(props.backtestResult.max_drawdown_high)} | ${formatPriceStake(\n            props.backtestResult.max_drawdown_low,\n          )}`,\n        },\n        { metric: 'Drawdown start', value: timestampms(props.backtestResult.drawdown_start_ts) },\n        { metric: 'Drawdown end', value: timestampms(props.backtestResult.drawdown_end_ts) },\n        { metric: '___', value: '___' },\n\n        {\n          metric: 'Best Pair',\n          value: `${props.backtestResult.best_pair.key} ${formatPercent(\n            props.backtestResult.best_pair.profit_sum,\n          )}`,\n        },\n        {\n          metric: 'Worst Pair',\n          value: `${props.backtestResult.worst_pair.key} ${formatPercent(\n            props.backtestResult.worst_pair.profit_sum,\n          )}`,\n        },\n        { metric: 'Best single Trade', value: bestPair.value },\n        { metric: 'Worst single Trade', value: worstPair.value },\n      ];\n    });\n\n    const backtestResultSettings = computed(() => {\n      // Transpose Result into readable format\n      return [\n        { setting: 'Backtesting from', value: timestampms(props.backtestResult.backtest_start_ts) },\n        { setting: 'Backtesting to', value: timestampms(props.backtestResult.backtest_end_ts) },\n        {\n          setting: 'BT execution time',\n          value: humanizeDurationFromSeconds(\n            props.backtestResult.backtest_run_end_ts - props.backtestResult.backtest_run_start_ts,\n          ),\n        },\n        { setting: 'Max open trades', value: props.backtestResult.max_open_trades },\n        { setting: 'Timeframe', value: props.backtestResult.timeframe },\n        { setting: 'Timerange', value: props.backtestResult.timerange },\n        { setting: 'Stoploss', value: formatPercent(props.backtestResult.stoploss, 2) },\n        { setting: 'Trailing Stoploss', value: props.backtestResult.trailing_stop },\n        {\n          setting: 'Trail only when offset is reached',\n          value: props.backtestResult.trailing_only_offset_is_reached,\n        },\n        { setting: 'Trailing Stop positive', value: props.backtestResult.trailing_stop_positive },\n        {\n          setting: 'Trailing stop positive offset',\n          value: props.backtestResult.trailing_stop_positive_offset,\n        },\n        { setting: 'Custom Stoploss', value: props.backtestResult.use_custom_stoploss },\n        { setting: 'ROI', value: props.backtestResult.minimal_roi },\n        {\n          setting: 'Use Exit Signal',\n          value:\n            props.backtestResult.use_exit_signal !== undefined\n              ? props.backtestResult.use_exit_signal\n              : props.backtestResult.use_sell_signal,\n        },\n        {\n          setting: 'Exit profit only',\n          value:\n            props.backtestResult.exit_profit_only !== undefined\n              ? props.backtestResult.exit_profit_only\n              : props.backtestResult.sell_profit_only,\n        },\n        {\n          setting: 'Exit profit offset',\n          value:\n            props.backtestResult.exit_profit_offset !== undefined\n              ? props.backtestResult.exit_profit_offset\n              : props.backtestResult.sell_profit_offset,\n        },\n        { setting: 'Enable protections', value: props.backtestResult.enable_protections },\n        {\n          setting: 'Starting balance',\n          value: formatPriceStake(props.backtestResult.starting_balance),\n        },\n        {\n          setting: 'Final balance',\n          value: formatPriceStake(props.backtestResult.final_balance),\n        },\n        {\n          setting: 'Avg. stake amount',\n          value: formatPriceStake(props.backtestResult.avg_stake_amount),\n        },\n        {\n          setting: 'Total trade volume',\n          value: formatPriceStake(props.backtestResult.total_volume),\n        },\n      ];\n    });\n    const perPairFields = computed(() => {\n      return [\n        { key: 'key', label: 'Pair' },\n        { key: 'trades', label: 'Buys' },\n        {\n          key: 'profit_mean',\n          label: 'Avg Profit %',\n          formatter: (value) => formatPercent(value, 2),\n        },\n        { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\n        {\n          key: 'profit_total_abs',\n          label: `Tot Profit ${props.backtestResult.stake_currency}`,\n          formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\n        },\n        {\n          key: 'profit_total',\n          label: 'Tot Profit %',\n          formatter: (value) => formatPercent(value, 2),\n        },\n        { key: 'duration_avg', label: 'Avg Duration' },\n        { key: 'wins', label: 'Wins' },\n        { key: 'draws', label: 'Draws' },\n        { key: 'losses', label: 'Losses' },\n      ];\n    });\n\n    const perExitReason = computed(() => {\n      return [\n        { key: 'exit_reason', label: 'Exit Reason' },\n        { key: 'trades', label: 'Buys' },\n        {\n          key: 'profit_mean',\n          label: 'Avg Profit %',\n          formatter: (value) => formatPercent(value, 2),\n        },\n        { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\n        {\n          key: 'profit_total_abs',\n          label: `Tot Profit ${props.backtestResult.stake_currency}`,\n\n          formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\n        },\n        {\n          key: 'profit_total',\n          label: 'Tot Profit %',\n          formatter: (value) => formatPercent(value, 2),\n        },\n        { key: 'wins', label: 'Wins' },\n        { key: 'draws', label: 'Draws' },\n        { key: 'losses', label: 'Losses' },\n      ];\n    });\n    const backtestResultFields: Array<Record<string, string>> = [\n      { key: 'metric', label: 'Metric' },\n      { key: 'value', label: 'Value' },\n    ];\n\n    const backtestsettingFields: Array<Record<string, string>> = [\n      { key: 'setting', label: 'Setting' },\n      { key: 'value', label: 'Value' },\n    ];\n\n    return {\n      hasBacktestResult,\n      formatPriceStake,\n      bestPair,\n      worstPair,\n      backtestResultStats,\n      backtestResultSettings,\n      perPairFields,\n      perExitReason,\n      backtestResultFields,\n      backtestsettingFields,\n    };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.backtestresult-container {\n  @media (min-width: 1200px) {\n    max-width: 1200px;\n  }\n}\n</style>\n","<template>\n  <div class=\"container d-flex flex-column align-items-center\">\n    <h3>Available results:</h3>\n    <b-list-group class=\"ml-2\">\n      <b-list-group-item\n        v-for=\"[key, strat] in Object.entries(backtestHistory)\"\n        :key=\"key\"\n        button\n        :active=\"key === selectedBacktestResultKey\"\n        class=\"d-flex justify-content-between align-items-center py-1\"\n        @click=\"setBacktestResult(key)\"\n      >\n        {{ key }} {{ strat.total_trades }} {{ formatPercent(strat.profit_total) }}\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { formatPercent } from '@/shared/formatters';\nimport { StrategyBacktestResult } from '@/types';\n\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  name: 'BacktestResultSelect',\n  props: {\n    backtestHistory: {\n      required: true,\n      type: Object as () => Record<string, StrategyBacktestResult>,\n    },\n    selectedBacktestResultKey: { required: false, default: '', type: String },\n  },\n  emits: ['selectionChange'],\n  setup(_, { emit }) {\n    const setBacktestResult = (key) => {\n      emit('selectionChange', key);\n    };\n    return {\n      formatPercent,\n      setBacktestResult,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n","<template>\n  <div>\n    <button\n      class=\"btn btn-secondary float-right\"\n      title=\"Refresh\"\n      aria-label=\"Refresh\"\n      @click=\"botStore.activeBot.getBacktestHistory\"\n    >\n      &#x21bb;\n    </button>\n    <p>\n      Load Historic results from disk. You can click on multiple results to load all of them into\n      freqUI.\n    </p>\n    <b-list-group v-if=\"botStore.activeBot.backtestHistoryList\" class=\"ml-2\">\n      <b-list-group-item\n        v-for=\"(res, idx) in botStore.activeBot.backtestHistoryList\"\n        :key=\"idx\"\n        class=\"d-flex justify-content-between align-items-center py-1 mb-1\"\n        button\n        @click=\"botStore.activeBot.getBacktestHistoryResult(res)\"\n      >\n        <strong>{{ res.strategy }}</strong>\n        backtested on: {{ timestampms(res.backtest_start_time * 1000) }}\n        <small>{{ res.filename }}</small>\n      </b-list-group-item>\n    </b-list-group>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, onMounted } from 'vue';\nimport { timestampms } from '@/shared/formatters';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  setup() {\n    const botStore = useBotStore();\n\n    onMounted(() => {\n      botStore.activeBot.getBacktestHistory();\n    });\n\n    return {\n      timestampms,\n      botStore,\n    };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n  <div class=\"container-fluid\" style=\"max-height: calc(100vh - 60px)\">\n    <div class=\"container-fluid\">\n      <div class=\"row mb-2\"></div>\n      <p v-if=\"!botStore.activeBot.canRunBacktest\">\n        Bot must be in webserver mode to enable Backtesting.\n      </p>\n      <div class=\"row w-100\">\n        <h2 class=\"col-4 col-lg-3\">Backtesting</h2>\n        <div\n          class=\"col-12 col-lg-order-last col-lg-6 mx-md-5 d-flex flex-wrap justify-content-md-center justify-content-between mb-4\"\n        >\n          <b-form-radio\n            v-if=\"botStore.activeBot.botApiVersion >= 2.15\"\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"historicResults\"\n            :disabled=\"!botStore.activeBot.canRunBacktest\"\n            >Load Results</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"run\"\n            :disabled=\"!botStore.activeBot.canRunBacktest\"\n            >Run backtest</b-form-radio\n          >\n          <b-form-radio\n            id=\"bt-analyze-btn\"\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"results\"\n            :disabled=\"!hasBacktestResult\"\n            >Analyze result</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"visualize-summary\"\n            :disabled=\"!hasBacktestResult\"\n            >Visualize summary</b-form-radio\n          >\n          <b-form-radio\n            v-model=\"btFormMode\"\n            name=\"bt-form-radios\"\n            button\n            class=\"mx-1 flex-samesize-items\"\n            value=\"visualize\"\n            :disabled=\"!hasBacktestResult\"\n            >Visualize result</b-form-radio\n          >\n        </div>\n        <small\n          v-show=\"botStore.activeBot.backtestRunning\"\n          class=\"text-right bt-running-label col-8 col-lg-3\"\n          >Backtest running: {{ botStore.activeBot.backtestStep }}\n          {{ formatPercent(botStore.activeBot.backtestProgress, 2) }}</small\n        >\n      </div>\n    </div>\n\n    <div class=\"d-md-flex\">\n      <!-- Left bar -->\n      <div\n        :class=\"`${showLeftBar ? 'col-md-3' : ''} sticky-top sticky-offset mr-3 d-flex flex-column`\"\n      >\n        <b-button\n          v-if=\"btFormMode !== 'visualize'\"\n          class=\"align-self-start\"\n          aria-label=\"Close\"\n          size=\"sm\"\n          @click=\"showLeftBar = !showLeftBar\"\n          >{{ showLeftBar ? '&lt;' : '&gt;' }}</b-button\n        >\n        <transition name=\"fade\" mode=\"in-out\">\n          <BacktestResultSelect\n            v-if=\"btFormMode !== 'visualize' && showLeftBar\"\n            :backtest-history=\"botStore.activeBot.backtestHistory\"\n            :selected-backtest-result-key=\"botStore.activeBot.selectedBacktestResultKey\"\n            @selectionChange=\"setBacktestResult\"\n          />\n        </transition>\n      </div>\n      <!-- End Left bar -->\n      <div\n        v-if=\"btFormMode == 'historicResults'\"\n        class=\"flex-fill row d-flex flex-column bt-config\"\n      >\n        <backtest-history-load />\n      </div>\n      <div v-if=\"btFormMode == 'run'\" class=\"flex-fill row d-flex flex-column bt-config\">\n        <div class=\"mb-2\">\n          <span>Strategy</span>\n          <StrategySelect v-model=\"strategy\"></StrategySelect>\n        </div>\n        <b-card bg-variant=\"light\" :disabled=\"botStore.activeBot.backtestRunning\">\n          <!-- Backtesting parameters -->\n          <b-form-group\n            label-cols-lg=\"2\"\n            label=\"Backtest params\"\n            label-size=\"sm\"\n            label-class=\"font-weight-bold pt-0\"\n            class=\"mb-0\"\n          >\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Timeframe:\"\n              label-align-sm=\"right\"\n              label-for=\"timeframe-select\"\n            >\n              <TimeframeSelect id=\"timeframe-select\" v-model=\"selectedTimeframe\" />\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Detail Timeframe:\"\n              label-align-sm=\"right\"\n              label-for=\"timeframe-detail-select\"\n              title=\"Detail timeframe, to simulate intra-candle results. Not setting this will not use this functionality.\"\n            >\n              <TimeframeSelect\n                id=\"timeframe-detail-select\"\n                v-model=\"selectedDetailTimeframe\"\n                :below-timeframe=\"selectedTimeframe\"\n              />\n            </b-form-group>\n\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Max open trades:\"\n              label-align-sm=\"right\"\n              label-for=\"max-open-trades\"\n            >\n              <b-form-input\n                id=\"max-open-trades\"\n                v-model=\"maxOpenTrades\"\n                placeholder=\"Use strategy default\"\n                type=\"number\"\n              ></b-form-input>\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Starting capital:\"\n              label-align-sm=\"right\"\n              label-for=\"starting-capital\"\n            >\n              <b-form-input\n                id=\"starting-capital\"\n                v-model=\"startingCapital\"\n                type=\"number\"\n                step=\"0.001\"\n              ></b-form-input>\n            </b-form-group>\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Stake amount:\"\n              label-align-sm=\"right\"\n              label-for=\"stake-amount\"\n            >\n              <div class=\"d-flex\">\n                <b-form-checkbox\n                  id=\"stake-amount-bool\"\n                  v-model=\"stakeAmountUnlimited\"\n                  class=\"col-md-6\"\n                  >Unlimited stake</b-form-checkbox\n                >\n\n                <b-form-input\n                  id=\"stake-amount\"\n                  v-model=\"stakeAmount\"\n                  type=\"number\"\n                  placeholder=\"Use strategy default\"\n                  step=\"0.01\"\n                  :disabled=\"stakeAmountUnlimited\"\n                ></b-form-input>\n              </div>\n            </b-form-group>\n\n            <b-form-group\n              label-cols-sm=\"5\"\n              label=\"Enable Protections:\"\n              label-align-sm=\"right\"\n              label-for=\"enable-protections\"\n            >\n              <b-form-checkbox\n                id=\"enable-protections\"\n                v-model=\"enableProtections\"\n              ></b-form-checkbox>\n            </b-form-group>\n\n            <!-- <b-form-group label-cols-sm=\"5\" label=\"Fee:\" label-align-sm=\"right\" label-for=\"fee\">\n              <b-form-input\n                id=\"fee\"\n                type=\"number\"\n                placeholder=\"Use exchange default\"\n                step=\"0.01\"\n              ></b-form-input>\n            </b-form-group> -->\n            <hr />\n            <TimeRangeSelect v-model=\"timerange\" class=\"mt-2\"></TimeRangeSelect>\n          </b-form-group>\n        </b-card>\n\n        <h3 class=\"mt-3\">Backtesting summary</h3>\n        <div\n          class=\"d-flex flex-wrap flex-md-nowrap justify-content-between justify-content-md-center\"\n        >\n          <b-button\n            id=\"start-backtest\"\n            variant=\"primary\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            class=\"mx-1\"\n            @click=\"clickBacktest\"\n          >\n            Start backtest\n          </b-button>\n          <b-button\n            variant=\"primary\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            class=\"mx-1\"\n            @click=\"botStore.activeBot.pollBacktest\"\n          >\n            Load backtest result\n          </b-button>\n          <b-button\n            variant=\"primary\"\n            class=\"mx-1\"\n            :disabled=\"!botStore.activeBot.backtestRunning\"\n            @click=\"botStore.activeBot.stopBacktest\"\n            >Stop Backtest</b-button\n          >\n          <b-button\n            variant=\"primary\"\n            class=\"mx-1\"\n            :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\n            @click=\"botStore.activeBot.removeBacktest\"\n            >Reset Backtest</b-button\n          >\n        </div>\n      </div>\n      <BacktestResultView\n        v-if=\"hasBacktestResult && btFormMode == 'results'\"\n        :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\n        class=\"flex-fill\"\n      />\n\n      <div\n        v-if=\"hasBacktestResult && btFormMode == 'visualize-summary'\"\n        class=\"text-center flex-fill mt-2 d-flex flex-column\"\n      >\n        <TradesLogChart\n          :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n          class=\"trades-log\"\n        />\n        <CumProfitChart\n          :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n          profit-column=\"profit_abs\"\n          class=\"cum-profit\"\n          :show-title=\"true\"\n        />\n      </div>\n    </div>\n\n    <div\n      v-if=\"hasBacktestResult && btFormMode == 'visualize'\"\n      class=\"container-fluid text-center w-100 mt-2\"\n    >\n      <p class=\"row\">\n        Graph will always show the latest values for the selected strategy. Timerange:\n        {{ timerange }} - {{ strategy }}\n      </p>\n      <div class=\"row text-center\">\n        <PairSummary\n          class=\"col-md-2 overflow-auto\"\n          style=\"max-height: calc(100vh - 200px)\"\n          :pairlist=\"botStore.activeBot.selectedBacktestResult.pairlist\"\n          :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n          sort-method=\"profit\"\n          :backtest-mode=\"true\"\n        />\n        <CandleChartContainer\n          :available-pairs=\"botStore.activeBot.selectedBacktestResult.pairlist\"\n          :historic-view=\"!!true\"\n          :timeframe=\"timeframe\"\n          :timerange=\"timerange\"\n          :strategy=\"strategy\"\n          :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n          class=\"col-md-10 candle-chart-container px-0 w-100 h-100\"\n        >\n        </CandleChartContainer>\n      </div>\n      <b-card header=\"Single trades\" class=\"row mt-2 w-100\">\n        <TradeList\n          class=\"row trade-history mt-2 w-100\"\n          :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\n          :show-filter=\"true\"\n          :stake-currency=\"botStore.activeBot.selectedBacktestResult.stake_currency\"\n        />\n      </b-card>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport TimeRangeSelect from '@/components/ftbot/TimeRangeSelect.vue';\nimport BacktestResultView from '@/components/ftbot/BacktestResultView.vue';\nimport BacktestResultSelect from '@/components/ftbot/BacktestResultSelect.vue';\nimport CandleChartContainer from '@/components/charts/CandleChartContainer.vue';\nimport StrategySelect from '@/components/ftbot/StrategySelect.vue';\nimport CumProfitChart from '@/components/charts/CumProfitChart.vue';\nimport TradesLogChart from '@/components/charts/TradesLog.vue';\nimport PairSummary from '@/components/ftbot/PairSummary.vue';\nimport TimeframeSelect from '@/components/ftbot/TimeframeSelect.vue';\nimport TradeList from '@/components/ftbot/TradeList.vue';\nimport BacktestHistoryLoad from '@/components/ftbot/BacktestHistoryLoad.vue';\n\nimport { BacktestPayload } from '@/types';\n\nimport { formatPercent } from '@/shared/formatters';\nimport { defineComponent, computed, ref, onMounted, watch } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  name: 'Backtesting',\n  components: {\n    BacktestResultView,\n    BacktestResultSelect,\n    BacktestHistoryLoad,\n    TimeRangeSelect,\n    CandleChartContainer,\n    CumProfitChart,\n    TradesLogChart,\n    StrategySelect,\n    PairSummary,\n    TimeframeSelect,\n    TradeList,\n  },\n  setup() {\n    const botStore = useBotStore();\n\n    const hasBacktestResult = computed(() =>\n      botStore.activeBot.backtestHistory\n        ? Object.keys(botStore.activeBot.backtestHistory).length !== 0\n        : false,\n    );\n    const timeframe = computed((): string => {\n      try {\n        return botStore.activeBot.selectedBacktestResult.timeframe;\n      } catch (err) {\n        return '';\n      }\n    });\n\n    const strategy = ref('');\n    const selectedTimeframe = ref('');\n    const selectedDetailTimeframe = ref('');\n    const timerange = ref('');\n    const showLeftBar = ref(false);\n    const enableProtections = ref(false);\n    const stakeAmountUnlimited = ref(false);\n    const maxOpenTrades = ref('');\n    const stakeAmount = ref('');\n    const startingCapital = ref('');\n    const btFormMode = ref('run');\n    const pollInterval = ref<number | null>(null);\n\n    const setBacktestResult = (key: string) => {\n      botStore.activeBot.setBacktestResultKey(key);\n\n      // Set parameters for this result\n      strategy.value = botStore.activeBot.selectedBacktestResult.strategy_name;\n      selectedTimeframe.value = botStore.activeBot.selectedBacktestResult.timeframe;\n      selectedDetailTimeframe.value =\n        botStore.activeBot.selectedBacktestResult.timeframe_detail || '';\n      timerange.value = botStore.activeBot.selectedBacktestResult.timerange;\n    };\n\n    const clickBacktest = () => {\n      const btPayload: BacktestPayload = {\n        strategy: strategy.value,\n        timerange: timerange.value,\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        enable_protections: enableProtections.value,\n      };\n      const openTradesInt = parseInt(maxOpenTrades.value, 10);\n      if (openTradesInt) {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        btPayload.max_open_trades = openTradesInt;\n      }\n      if (stakeAmountUnlimited.value) {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        btPayload.stake_amount = 'unlimited';\n      } else {\n        const stakeAmountLoc = Number(stakeAmount.value);\n        if (stakeAmountLoc) {\n          // eslint-disable-next-line @typescript-eslint/camelcase\n          btPayload.stake_amount = stakeAmountLoc.toString();\n        }\n      }\n\n      const startingCapitalLoc = Number(startingCapital.value);\n      if (startingCapitalLoc) {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        btPayload.dry_run_wallet = startingCapitalLoc;\n      }\n\n      if (selectedTimeframe.value) {\n        btPayload.timeframe = selectedTimeframe.value;\n      }\n      if (selectedDetailTimeframe.value) {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        btPayload.timeframe_detail = selectedDetailTimeframe.value;\n      }\n\n      botStore.activeBot.startBacktest(btPayload);\n    };\n    onMounted(() => botStore.activeBot.getState());\n    watch(\n      () => botStore.activeBot.backtestRunning,\n      () => {\n        if (botStore.activeBot.backtestRunning === true) {\n          pollInterval.value = window.setInterval(botStore.activeBot.pollBacktest, 1000);\n        } else if (pollInterval.value) {\n          clearInterval(pollInterval.value);\n          pollInterval.value = null;\n        }\n      },\n    );\n    return {\n      botStore,\n\n      formatPercent,\n      hasBacktestResult,\n      timeframe,\n      setBacktestResult,\n      strategy,\n      selectedTimeframe,\n      selectedDetailTimeframe,\n      timerange,\n      enableProtections,\n      showLeftBar,\n      stakeAmountUnlimited,\n      maxOpenTrades,\n      stakeAmount,\n      startingCapital,\n      btFormMode,\n      clickBacktest,\n    };\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n.candle-chart-container {\n  // TODO: Rough estimate - still to fix correctly\n  // Applies to all \"calc\" usages in this file.\n  height: calc(100vh - 250px) !important;\n}\n\n.cum-profit {\n  height: 350px !important;\n  max-height: 350px;\n}\n.trades-log {\n  height: 350px !important;\n  max-height: 350px;\n}\n.bt-running-label {\n  position: absolute;\n  right: 2em;\n  margin-top: 1em;\n}\n\n.sticky-offset {\n  top: 2em;\n}\n.flex-samesize-items {\n  flex: 1 1 0;\n  @media md {\n    flex: unset;\n  }\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.2s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\n.bt-config {\n  @media (min-width: 992px) {\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 75vw;\n  }\n}\n</style>\n"],"names":["_sfc_main","ref"],"mappings":"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"}