{"version":3,"file":"Trading.8c0ae368.js","sources":["../../node_modules/vue-material-design-icons/Play.vue","../../node_modules/vue-material-design-icons/Stop.vue","../../node_modules/vue-material-design-icons/Pause.vue","../../node_modules/vue-material-design-icons/Reload.vue","../../node_modules/vue-material-design-icons/PlusBoxMultipleOutline.vue","../../src/components/ftbot/ForceEntryForm.vue","../../src/components/ftbot/BotControls.vue","../../src/components/ftbot/BotStatus.vue","../../src/components/ftbot/DailyStats.vue","../../src/components/ftbot/PairLockList.vue","../../src/components/ftbot/Performance.vue","../../src/views/Trading.vue"],"sourcesContent":["<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"!title\"\n        :aria-label=\"title\"\n        class=\"material-design-icon play-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M8,5.14V19.14L19,12.14L8,5.14Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"PlayIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"!title\"\n        :aria-label=\"title\"\n        class=\"material-design-icon stop-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M18,18H6V6H18V18Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"StopIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"!title\"\n        :aria-label=\"title\"\n        class=\"material-design-icon pause-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M14,19H18V5H14M6,19H10V5H6V19Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"PauseIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"!title\"\n        :aria-label=\"title\"\n        class=\"material-design-icon reload-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M2 12C2 16.97 6.03 21 11 21C13.39 21 15.68 20.06 17.4 18.4L15.9 16.9C14.63 18.25 12.86 19 11 19C4.76 19 1.64 11.46 6.05 7.05C10.46 2.64 18 5.77 18 12H15L19 16H19.1L23 12H20C20 7.03 15.97 3 11 3C6.03 3 2 7.03 2 12Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"ReloadIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<template>\n  <span v-bind=\"$attrs\"\n        :aria-hidden=\"!title\"\n        :aria-label=\"title\"\n        class=\"material-design-icon plus-box-multiple-outline-icon\"\n        role=\"img\"\n        @click=\"$emit('click', $event)\">\n    <svg :fill=\"fillColor\"\n         class=\"material-design-icon__svg\"\n         :width=\"size\"\n         :height=\"size\"\n         viewBox=\"0 0 24 24\">\n      <path d=\"M18 11H15V14H13V11H10V9H13V6H15V9H18M20 4V16H8V4H20M20 2H8C6.9 2 6 2.9 6 4V16C6 17.11 6.9 18 8 18H20C21.11 18 22 17.11 22 16V4C22 2.9 21.11 2 20 2M4 6H2V20C2 21.11 2.9 22 4 22H18V20H4V6Z\">\n        <title v-if=\"title\">{{ title }}</title>\n      </path>\n    </svg>\n  </span>\n</template>\n\n<script>\nexport default {\n  name: \"PlusBoxMultipleOutlineIcon\",\n  emits: ['click'],\n  props: {\n    title: {\n      type: String,\n    },\n    fillColor: {\n      type: String,\n      default: \"currentColor\"\n    },\n    size: {\n      type: Number,\n      default: 24\n    }\n  }\n}\n</script>","<template>\n  <div>\n    <b-modal\n      id=\"forceentry-modal\"\n      ref=\"modal\"\n      title=\"Force entering a trade\"\n      @show=\"resetForm\"\n      @hidden=\"resetForm\"\n      @ok=\"handleEntry\"\n    >\n      <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\n        <b-form-group\n          v-if=\"botStore.activeBot.botApiVersion >= 2.13 && botStore.activeBot.shortAllowed\"\n          label=\"Order direction (Long or Short)\"\n          label-for=\"order-direction\"\n          invalid-feedback=\"Stake-amount must be empty or a positive number\"\n        >\n          <b-select\n            v-model=\"orderSide\"\n            class=\"ml-2\"\n            :options=\"['long', 'short']\"\n            style=\"min-width: 7em\"\n          >\n          </b-select>\n        </b-form-group>\n        <b-form-group label=\"Pair\" label-for=\"pair-input\" invalid-feedback=\"Pair is required\">\n          <b-form-input\n            id=\"pair-input\"\n            v-model=\"pair\"\n            required\n            @keydown.enter.native=\"handleEntry\"\n          ></b-form-input>\n        </b-form-group>\n        <b-form-group\n          label=\"*Price [optional]\"\n          label-for=\"price-input\"\n          invalid-feedback=\"Price must be empty or a positive number\"\n        >\n          <b-form-input\n            id=\"price-input\"\n            v-model=\"price\"\n            type=\"number\"\n            step=\"0.00000001\"\n            @keydown.enter.native=\"handleEntry\"\n          ></b-form-input>\n        </b-form-group>\n        <b-form-group\n          v-if=\"botStore.activeBot.botApiVersion > 1.12\"\n          :label=\"`*Stake-amount in ${botStore.activeBot.stakeCurrency} [optional]`\"\n          label-for=\"stake-input\"\n          invalid-feedback=\"Stake-amount must be empty or a positive number\"\n        >\n          <b-form-input\n            id=\"stake-input\"\n            v-model=\"stakeAmount\"\n            type=\"number\"\n            step=\"0.000001\"\n            @keydown.enter.native=\"handleEntry\"\n          ></b-form-input>\n        </b-form-group>\n        <b-form-group\n          v-if=\"botStore.activeBot.botApiVersion > 1.1\"\n          label=\"*OrderType\"\n          label-for=\"ordertype-input\"\n          invalid-feedback=\"OrderType\"\n        >\n          <b-select\n            v-model=\"ordertype\"\n            class=\"ml-2\"\n            :options=\"['market', 'limit']\"\n            style=\"min-width: 7em\"\n            size=\"sm\"\n          >\n          </b-select>\n        </b-form-group>\n      </form>\n    </b-modal>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { useBotStore } from '@/stores/ftbotwrapper';\nimport { ForceEnterPayload, OrderSides } from '@/types';\n\nimport { defineComponent, ref, nextTick, getCurrentInstance } from 'vue';\n\nexport default defineComponent({\n  name: 'ForceEntryForm',\n  setup() {\n    const root = getCurrentInstance();\n    const botStore = useBotStore();\n\n    const form = ref<HTMLFormElement>();\n    const pair = ref('');\n    const price = ref<number | null>(null);\n    const stakeAmount = ref<number | null>(null);\n    const ordertype = ref('');\n    const orderSide = ref<OrderSides>(OrderSides.long);\n\n    const checkFormValidity = () => {\n      const valid = form.value?.checkValidity();\n\n      return valid;\n    };\n\n    const handleSubmit = () => {\n      // Exit when the form isn't valid\n      if (!checkFormValidity()) {\n        return;\n      }\n      // call forceentry\n      const payload: ForceEnterPayload = { pair: pair.value };\n      if (price.value) {\n        payload.price = Number(price.value);\n      }\n      if (ordertype.value) {\n        payload.ordertype = ordertype.value;\n      }\n      if (stakeAmount.value) {\n        payload.stakeamount = stakeAmount.value;\n      }\n      if (botStore.activeBot.botApiVersion >= 2.13 && botStore.activeBot.shortAllowed) {\n        payload.side = orderSide.value;\n      }\n      botStore.activeBot.forceentry(payload);\n      nextTick(() => {\n        root?.proxy.$bvModal.hide('forceentry-modal');\n      });\n    };\n    const resetForm = () => {\n      console.log('resetForm');\n      pair.value = '';\n      price.value = null;\n      stakeAmount.value = null;\n      if (botStore.activeBot.botApiVersion > 1.1) {\n        ordertype.value =\n          botStore.activeBot.botState?.order_types?.forcebuy ||\n          botStore.activeBot.botState?.order_types?.force_entry ||\n          botStore.activeBot.botState?.order_types?.buy ||\n          botStore.activeBot.botState?.order_types?.entry ||\n          'limit';\n      }\n    };\n\n    const handleEntry = (bvModalEvt) => {\n      // Prevent modal from closing\n      bvModalEvt.preventDefault();\n      // Trigger submit handler\n      handleSubmit();\n    };\n    return {\n      handleSubmit,\n      botStore,\n      form,\n      handleEntry,\n      resetForm,\n      pair,\n      price,\n      stakeAmount,\n      ordertype,\n      orderSide,\n    };\n  },\n});\n</script>\n","forceexit\n<template>\n  <div>\n    <button\n      class=\"btn btn-secondary btn-sm ml-1\"\n      :disabled=\"!botStore.activeBot.isTrading || isRunning\"\n      title=\"Start Trading\"\n      @click=\"botStore.activeBot.startBot()\"\n    >\n      <PlayIcon />\n    </button>\n    <button\n      class=\"btn btn-secondary btn-sm ml-1\"\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\n      title=\"Stop Trading - Also stops handling open trades.\"\n      @click=\"handleStopBot()\"\n    >\n      <StopIcon />\n    </button>\n    <button\n      class=\"btn btn-secondary btn-sm ml-1\"\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\n      title=\"StopBuy - Stops buying, but still handles open trades\"\n      @click=\"handleStopBuy()\"\n    >\n      <PauseIcon />\n    </button>\n    <button\n      class=\"btn btn-secondary btn-sm ml-1\"\n      :disabled=\"!botStore.activeBot.isTrading\"\n      title=\"Reload Config - reloads configuration including strategy, resetting all settings changed on the fly.\"\n      @click=\"handleReloadConfig()\"\n    >\n      <ReloadIcon />\n    </button>\n    <button\n      class=\"btn btn-secondary btn-sm ml-1\"\n      :disabled=\"!botStore.activeBot.isTrading\"\n      title=\"Force exit all\"\n      @click=\"handleForceExit()\"\n    >\n      <ForceExitIcon />\n    </button>\n    <button\n      v-if=\"\n        botStore.activeBot.botState &&\n        (botStore.activeBot.botState.force_entry_enable ||\n          botStore.activeBot.botState.forcebuy_enabled)\n      \"\n      class=\"btn btn-secondary btn-sm ml-1\"\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\n      title=\"Force enter - Immediately enter a trade at an optional price. Exits are then handled according to strategy rules.\"\n      @click=\"initiateForceenter\"\n    >\n      <ForceEntryIcon />\n    </button>\n    <button\n      v-if=\"botStore.activeBot.isWebserverMode && false\"\n      :disabled=\"botStore.activeBot.isTrading\"\n      class=\"btn btn-secondary btn-sm ml-1\"\n      title=\"Start Trading mode\"\n      @click=\"botStore.activeBot.startTrade()\"\n    >\n      <PlayIcon />\n    </button>\n    <ForceEntryForm @close=\"hideForceenter\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ForceSellPayload } from '@/types';\nimport PlayIcon from 'vue-material-design-icons/Play.vue';\nimport StopIcon from 'vue-material-design-icons/Stop.vue';\nimport PauseIcon from 'vue-material-design-icons/Pause.vue';\nimport ReloadIcon from 'vue-material-design-icons/Reload.vue';\nimport ForceExitIcon from 'vue-material-design-icons/CloseBoxMultiple.vue';\nimport ForceEntryIcon from 'vue-material-design-icons/PlusBoxMultipleOutline.vue';\nimport ForceEntryForm from './ForceEntryForm.vue';\nimport { defineComponent, computed, ref, getCurrentInstance } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  name: 'BotControls',\n  components: {\n    ForceEntryForm,\n    PlayIcon,\n    StopIcon,\n    PauseIcon,\n    ReloadIcon,\n    ForceExitIcon,\n    ForceEntryIcon,\n  },\n  setup() {\n    const root = getCurrentInstance();\n    const botStore = useBotStore();\n    const forcebuyShow = ref(false);\n\n    const isRunning = computed((): boolean => {\n      return botStore.activeBot.botState?.state === 'running';\n    });\n\n    const initiateForceenter = () => {\n      root?.proxy.$bvModal.show('forceentry-modal');\n    };\n    const hideForceenter = () => {\n      root?.proxy.$bvModal.hide('forceentry-modal');\n    };\n\n    const handleStopBot = () => {\n      root?.proxy.$bvModal.msgBoxConfirm('Stop Bot?').then((value: boolean) => {\n        if (value) {\n          botStore.activeBot.stopBot();\n        }\n      });\n    };\n\n    const handleStopBuy = () => {\n      root?.proxy.$bvModal\n        .msgBoxConfirm('Stop buying? Freqtrade will continue to handle open trades.')\n        .then((value: boolean) => {\n          if (value) {\n            botStore.activeBot.stopBuy();\n          }\n        });\n    };\n\n    const handleReloadConfig = () => {\n      root?.proxy.$bvModal.msgBoxConfirm('Reload configuration?').then((value: boolean) => {\n        if (value) {\n          botStore.activeBot.reloadConfig();\n        }\n      });\n    };\n\n    const handleForceExit = () => {\n      root?.proxy.$bvModal.msgBoxConfirm(`Really forcesell ALL trades?`).then((value: boolean) => {\n        if (value) {\n          const payload: ForceSellPayload = {\n            tradeid: 'all',\n            // TODO: support ordertype (?)\n          };\n          botStore.activeBot.forceexit(payload);\n        }\n      });\n    };\n    return {\n      initiateForceenter,\n      hideForceenter,\n      handleStopBot,\n      handleStopBuy,\n      handleReloadConfig,\n      handleForceExit,\n      forcebuyShow,\n      botStore,\n      isRunning,\n    };\n  },\n});\n</script>\n","<template>\n  <div v-if=\"botStore.activeBot.botState\">\n    <p>\n      Running Freqtrade <strong>{{ botStore.activeBot.version }}</strong>\n    </p>\n    <p>\n      Running with\n      <strong>\n        {{ botStore.activeBot.botState.max_open_trades }}x{{\n          botStore.activeBot.botState.stake_amount\n        }}\n        {{ botStore.activeBot.botState.stake_currency }}\n      </strong>\n      on\n      <strong>{{ botStore.activeBot.botState.exchange }}</strong> in\n      <strong>{{ botStore.activeBot.botState.trading_mode || 'spot' }}</strong> markets, with\n      Strategy\n      <strong>{{ botStore.activeBot.botState.strategy }}</strong>\n    </p>\n    <p>\n      Currently <strong>{{ botStore.activeBot.botState.state }}</strong\n      >,\n      <strong\n        >force entry:\n        {{\n          botStore.activeBot.botState.force_entry_enable ||\n          botStore.activeBot.botState.forcebuy_enabled\n        }}</strong\n      >\n    </p>\n    <p>\n      <strong>{{ botStore.activeBot.botState.dry_run ? 'Dry-Run' : 'Live' }}</strong>\n    </p>\n    <hr />\n    <p>\n      Avg Profit {{ formatPercent(botStore.activeBot.profit.profit_all_ratio_mean) }} (&sum;\n      {{ formatPercent(botStore.activeBot.profit.profit_all_ratio_sum) }}) in\n      {{ botStore.activeBot.profit.trade_count }} Trades, with an average duration of\n      {{ botStore.activeBot.profit.avg_duration }}. Best pair:\n      {{ botStore.activeBot.profit.best_pair }}.\n    </p>\n    <p v-if=\"botStore.activeBot.profit.first_trade_timestamp\">\n      First trade opened:\n\n      <strong>\n        <DateTimeTZ :date=\"botStore.activeBot.profit.first_trade_timestamp\" show-timezone />\n      </strong>\n      <br />\n      Last trade opened:\n      <strong>\n        <DateTimeTZ :date=\"botStore.activeBot.profit.latest_trade_timestamp\" show-timezone />\n      </strong>\n    </p>\n    <p>\n      <span v-if=\"botStore.activeBot.profit.profit_factor\">\n        Profit factor:\n        {{ botStore.activeBot.profit.profit_factor.toFixed(2) }}\n      </span>\n      <br />\n      <span v-if=\"botStore.activeBot.profit.trading_volume\">\n        Trading volume:\n        {{\n          formatPriceCurrency(\n            botStore.activeBot.profit.trading_volume,\n            botStore.activeBot.botState.stake_currency,\n            botStore.activeBot.botState.stake_currency_decimals ?? 3,\n          )\n        }}\n      </span>\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { formatPercent, formatPriceCurrency } from '@/shared/formatters';\nimport DateTimeTZ from '@/components/general/DateTimeTZ.vue';\n\nimport { defineComponent } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  name: 'BotStatus',\n  components: { DateTimeTZ },\n  setup() {\n    const botStore = useBotStore();\n    return {\n      formatPercent,\n      formatPriceCurrency,\n      botStore,\n    };\n  },\n});\n</script>\n","<template>\n  <div>\n    <div class=\"mb-2\">\n      <label class=\"mr-auto h3\">Daily Stats</label>\n      <b-button class=\"float-right\" size=\"sm\" @click=\"botStore.activeBot.getDaily\"\n        >&#x21bb;</b-button\n      >\n    </div>\n    <div>\n      <DailyChart\n        v-if=\"botStore.activeBot.dailyStats.data\"\n        :daily-stats=\"botStore.activeBot.dailyStats\"\n      />\n    </div>\n    <div>\n      <b-table class=\"table-sm\" :items=\"botStore.activeBot.dailyStats.data\" :fields=\"dailyFields\">\n      </b-table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, onMounted } from 'vue';\nimport DailyChart from '@/components/charts/DailyChart.vue';\nimport { formatPercent, formatPrice } from '@/shared/formatters';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  name: 'DailyStats',\n  components: {\n    DailyChart,\n  },\n  setup() {\n    const botStore = useBotStore();\n    const dailyFields = computed(() => {\n      return [\n        { key: 'date', label: 'Day' },\n        { key: 'abs_profit', label: 'Profit', formatter: (value) => formatPrice(value) },\n        {\n          key: 'fiat_value',\n          label: `In ${botStore.activeBot.dailyStats.fiat_display_currency}`,\n          formatter: (value) => formatPrice(value, 2),\n        },\n        { key: 'trade_count', label: 'Trades' },\n        botStore.activeBot.botApiVersion >= 2.16\n          ? { key: 'rel_profit', label: 'Profit%', formatter: (value) => formatPercent(value, 2) }\n          : null,\n      ];\n    });\n    onMounted(() => {\n      botStore.activeBot.getDaily();\n    });\n\n    return {\n      botStore,\n      dailyFields,\n    };\n  },\n});\n</script>\n","<template>\n  <div>\n    <div class=\"mb-2\">\n      <label class=\"mr-auto h3\">Pair Locks</label>\n      <b-button class=\"float-right\" size=\"sm\" @click=\"botStore.activeBot.getLocks\"\n        >&#x21bb;</b-button\n      >\n    </div>\n    <div>\n      <b-table class=\"table-sm\" :items=\"botStore.activeBot.activeLocks\" :fields=\"tableFields\">\n        <template #cell(actions)=\"row\">\n          <b-button\n            class=\"btn-xs ml-1\"\n            size=\"sm\"\n            title=\"Delete trade\"\n            @click=\"removePairLock(row.item)\"\n          >\n            <DeleteIcon :size=\"16\" />\n          </b-button>\n        </template>\n      </b-table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { timestampms } from '@/shared/formatters';\nimport { Lock } from '@/types';\n\nimport DeleteIcon from 'vue-material-design-icons/Delete.vue';\nimport { showAlert } from '@/stores/alerts';\nimport { defineComponent } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  name: 'PairLockList',\n  components: { DeleteIcon },\n  setup() {\n    const botStore = useBotStore();\n\n    const tableFields = [\n      { key: 'pair', label: 'Pair' },\n      { key: 'lock_end_timestamp', label: 'Until', formatter: 'timestampms' },\n      { key: 'reason', label: 'Reason' },\n      { key: 'actions' },\n    ];\n\n    const removePairLock = (item: Lock) => {\n      console.log(item);\n      if (item.id !== undefined) {\n        botStore.activeBot.deleteLock(item.id);\n      } else {\n        showAlert('This Freqtrade version does not support deleting locks.');\n      }\n    };\n\n    return {\n      timestampms,\n      botStore,\n      tableFields,\n      removePairLock,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n","<template>\n  <div>\n    <div class=\"mb-2\">\n      <h3>Performance</h3>\n    </div>\n    <b-table\n      class=\"table-sm\"\n      :items=\"botStore.activeBot.performanceStats\"\n      :fields=\"tableFields\"\n    ></b-table>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { formatPrice } from '@/shared/formatters';\nimport { defineComponent, computed } from 'vue';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  name: 'Performance',\n  setup() {\n    const botStore = useBotStore();\n    const tableFields = computed(() => {\n      return [\n        { key: 'pair', label: 'Pair' },\n        { key: 'profit', label: 'Profit %' },\n        {\n          key: 'profit_abs',\n          label: `Profit ${botStore.activeBot.botState?.stake_currency}`,\n          formatter: (v: number) => formatPrice(v, 5),\n        },\n        { key: 'count', label: 'Count' },\n      ];\n    });\n    return {\n      tableFields,\n      botStore,\n    };\n  },\n});\n</script>\n","<template>\n  <GridLayout\n    class=\"h-100 w-100\"\n    :row-height=\"50\"\n    :layout=\"gridLayout\"\n    :vertical-compact=\"false\"\n    :margin=\"[5, 5]\"\n    :responsive-layouts=\"responsiveGridLayouts\"\n    :is-resizable=\"!isLayoutLocked\"\n    :is-draggable=\"!isLayoutLocked\"\n    :responsive=\"true\"\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\n    @layout-updated=\"layoutUpdatedEvent\"\n    @breakpoint-changed=\"breakpointChanged\"\n  >\n    <GridItem\n      v-if=\"gridLayoutMultiPane.h != 0\"\n      :i=\"gridLayoutMultiPane.i\"\n      :x=\"gridLayoutMultiPane.x\"\n      :y=\"gridLayoutMultiPane.y\"\n      :w=\"gridLayoutMultiPane.w\"\n      :h=\"gridLayoutMultiPane.h\"\n      drag-allow-from=\".card-header\"\n    >\n      <DraggableContainer header=\"Multi Pane\">\n        <div class=\"mt-1 d-flex justify-content-center\">\n          <BotControls class=\"mt-1 mb-2\" />\n        </div>\n        <b-tabs content-class=\"mt-3\" class=\"mt-1\">\n          <b-tab title=\"Pairs combined\" active>\n            <PairSummary\n              :pairlist=\"botStore.activeBot.whitelist\"\n              :current-locks=\"botStore.activeBot.activeLocks\"\n              :trades=\"botStore.activeBot.openTrades\"\n            />\n          </b-tab>\n          <b-tab title=\"General\">\n            <BotStatus />\n          </b-tab>\n          <b-tab title=\"Performance\">\n            <Performance class=\"performance-view\" />\n          </b-tab>\n          <b-tab title=\"Balance\" lazy>\n            <Balance />\n          </b-tab>\n          <b-tab title=\"Daily Stats\" lazy>\n            <DailyStats />\n          </b-tab>\n\n          <b-tab title=\"Pairlist\" lazy>\n            <FTBotAPIPairList />\n          </b-tab>\n          <b-tab title=\"Pair Locks\" lazy>\n            <PairLockList />\n          </b-tab>\n        </b-tabs>\n      </DraggableContainer>\n    </GridItem>\n    <GridItem\n      v-if=\"gridLayoutOpenTrades.h != 0\"\n      :i=\"gridLayoutOpenTrades.i\"\n      :x=\"gridLayoutOpenTrades.x\"\n      :y=\"gridLayoutOpenTrades.y\"\n      :w=\"gridLayoutOpenTrades.w\"\n      :h=\"gridLayoutOpenTrades.h\"\n      drag-allow-from=\".card-header\"\n    >\n      <DraggableContainer header=\"Open Trades\">\n        <TradeList\n          class=\"open-trades\"\n          :trades=\"botStore.activeBot.openTrades\"\n          title=\"Open trades\"\n          :active-trades=\"true\"\n          empty-text=\"Currently no open trades.\"\n        />\n      </DraggableContainer>\n    </GridItem>\n    <GridItem\n      v-if=\"gridLayoutTradeHistory.h != 0\"\n      :i=\"gridLayoutTradeHistory.i\"\n      :x=\"gridLayoutTradeHistory.x\"\n      :y=\"gridLayoutTradeHistory.y\"\n      :w=\"gridLayoutTradeHistory.w\"\n      :h=\"gridLayoutTradeHistory.h\"\n      drag-allow-from=\".card-header\"\n    >\n      <DraggableContainer header=\"Closed Trades\">\n        <TradeList\n          class=\"trade-history\"\n          :trades=\"botStore.activeBot.closedTrades\"\n          title=\"Trade history\"\n          :show-filter=\"true\"\n          empty-text=\"No closed trades so far.\"\n        />\n      </DraggableContainer>\n    </GridItem>\n    <GridItem\n      v-if=\"botStore.activeBot.detailTradeId && gridLayoutTradeDetail.h != 0\"\n      :i=\"gridLayoutTradeDetail.i\"\n      :x=\"gridLayoutTradeDetail.x\"\n      :y=\"gridLayoutTradeDetail.y\"\n      :w=\"gridLayoutTradeDetail.w\"\n      :h=\"gridLayoutTradeDetail.h\"\n      :min-h=\"4\"\n      drag-allow-from=\".card-header\"\n    >\n      <DraggableContainer header=\"Trade Detail\">\n        <TradeDetail\n          :trade=\"botStore.activeBot.tradeDetail\"\n          :stake-currency=\"botStore.activeBot.stakeCurrency\"\n        />\n      </DraggableContainer>\n    </GridItem>\n    <GridItem\n      v-if=\"gridLayoutTradeDetail.h != 0\"\n      :i=\"gridLayoutChartView.i\"\n      :x=\"gridLayoutChartView.x\"\n      :y=\"gridLayoutChartView.y\"\n      :w=\"gridLayoutChartView.w\"\n      :h=\"gridLayoutChartView.h\"\n      :min-h=\"6\"\n      drag-allow-from=\".card-header\"\n    >\n      <DraggableContainer header=\"Chart\">\n        <CandleChartContainer\n          :available-pairs=\"botStore.activeBot.whitelist\"\n          :historic-view=\"!!false\"\n          :timeframe=\"botStore.activeBot.timeframe\"\n          :trades=\"botStore.activeBot.allTrades\"\n        >\n        </CandleChartContainer>\n      </DraggableContainer>\n    </GridItem>\n  </GridLayout>\n</template>\n\n<script lang=\"ts\">\nimport { GridLayout, GridItem, GridItemData } from 'vue-grid-layout';\n\nimport Balance from '@/components/ftbot/Balance.vue';\nimport BotControls from '@/components/ftbot/BotControls.vue';\nimport BotStatus from '@/components/ftbot/BotStatus.vue';\nimport CandleChartContainer from '@/components/charts/CandleChartContainer.vue';\nimport DailyStats from '@/components/ftbot/DailyStats.vue';\nimport DraggableContainer from '@/components/layout/DraggableContainer.vue';\nimport FTBotAPIPairList from '@/components/ftbot/FTBotAPIPairList.vue';\nimport PairLockList from '@/components/ftbot/PairLockList.vue';\nimport PairSummary from '@/components/ftbot/PairSummary.vue';\nimport Performance from '@/components/ftbot/Performance.vue';\nimport TradeDetail from '@/components/ftbot/TradeDetail.vue';\nimport TradeList from '@/components/ftbot/TradeList.vue';\n\nimport { defineComponent, ref, computed } from 'vue';\nimport { useLayoutStore, findGridLayout, TradeLayout } from '@/stores/layout';\nimport { useBotStore } from '@/stores/ftbotwrapper';\n\nexport default defineComponent({\n  name: 'Trading',\n  components: {\n    Balance,\n    BotControls,\n    BotStatus,\n    CandleChartContainer,\n    DailyStats,\n    DraggableContainer,\n    FTBotAPIPairList,\n    GridItem,\n    GridLayout,\n    PairLockList,\n    PairSummary,\n    Performance,\n    TradeDetail,\n    TradeList,\n  },\n  setup() {\n    const botStore = useBotStore();\n    const layoutStore = useLayoutStore();\n    const currentBreakpoint = ref('');\n\n    const breakpointChanged = (newBreakpoint) => {\n      // console.log('breakpoint:', newBreakpoint);\n      currentBreakpoint.value = newBreakpoint;\n    };\n    const isResizableLayout = computed(() =>\n      ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\n    );\n    const isLayoutLocked = computed(() => {\n      return layoutStore.layoutLocked || !isResizableLayout;\n    });\n    const gridLayout = computed((): GridItemData[] => {\n      if (isResizableLayout) {\n        return layoutStore.tradingLayout;\n      }\n      return [...layoutStore.getTradingLayoutSm];\n    });\n\n    const gridLayoutMultiPane = computed(() => {\n      return findGridLayout(gridLayout.value, TradeLayout.multiPane);\n    });\n\n    const gridLayoutOpenTrades = computed(() => {\n      return findGridLayout(gridLayout.value, TradeLayout.openTrades);\n    });\n\n    const gridLayoutTradeHistory = computed(() => {\n      return findGridLayout(gridLayout.value, TradeLayout.tradeHistory);\n    });\n\n    const gridLayoutTradeDetail = computed(() => {\n      return findGridLayout(gridLayout.value, TradeLayout.tradeDetail);\n    });\n\n    const gridLayoutChartView = computed(() => {\n      return findGridLayout(gridLayout.value, TradeLayout.chartView);\n    });\n\n    const responsiveGridLayouts = computed(() => {\n      return {\n        sm: layoutStore.getTradingLayoutSm,\n      };\n    });\n\n    const layoutUpdatedEvent = (newLayout) => {\n      if (isResizableLayout) {\n        layoutStore.tradingLayout = newLayout;\n      }\n    };\n\n    return {\n      botStore,\n\n      layoutStore,\n      breakpointChanged,\n      layoutUpdatedEvent,\n      isLayoutLocked,\n      gridLayout,\n      gridLayoutMultiPane,\n      gridLayoutOpenTrades,\n      gridLayoutTradeHistory,\n      gridLayoutTradeDetail,\n      gridLayoutChartView,\n      responsiveGridLayouts,\n      isResizableLayout,\n    };\n  },\n});\n</script>\n\n<style scoped></style>\n"],"names":["_sfc_main","ref","ForceExitIcon","GridItem","GridLayout"],"mappings":"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"}